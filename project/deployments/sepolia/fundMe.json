{
  "address": "0xF1bD2B28417813c0a0570BfAea1b90Ab793593E1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "funded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "withdrawLog",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFunderCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdeaf3051573497bea5f5e36e913f12e0c9ca9405c9714d8b9fef3521fa8d7b05",
  "receipt": {
    "to": null,
    "from": "0xa0C19461913C42C915D91f243F1A548f779af5eb",
    "contractAddress": "0xF1bD2B28417813c0a0570BfAea1b90Ab793593E1",
    "transactionIndex": 33,
    "gasUsed": "1085195",
    "logsBloom": "0x
    "blockHash": "0x623ac448e5db9dc3bd2c6871074d933e849d5238ee7ff4177828b2d6924a2e83",
    "transactionHash": "0xdeaf3051573497bea5f5e36e913f12e0c9ca9405c9714d8b9fef3521fa8d7b05",
    "logs": [],
    "blockNumber": 4474713,
    "cumulativeGasUsed": "7207023",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 4,
  "solcInputHash": "bc07d896c53acdcf4ffe5b4917afc6d1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"funded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"withdrawLog\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFunderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fundMe.sol\":\"fundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n  function getPrice(AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n  }\\n\\n  // 1000000000\\n  // call it get fiatConversionRate, since it assumes something about decimals\\n  // It wouldn't work for every aggregator\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\\n\",\"keccak256\":\"0x85e1796e8ea7d1ae7df679124784e93ec9bada2bb235a8a1be214bff6462629c\",\"license\":\"MIT\"},\"contracts/fundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.0;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Patrick Collins\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\n\\n\\ncontract fundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface private s_priceFeed;\\n    \\n\\n    // Events (we have none!)\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    event funded(address indexed from, uint256 time, uint256 value);\\n    event withdrawLog(address indexed from, uint256 time);\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n        emit funded(msg.sender, block.timestamp, msg.value);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n        emit withdrawLog(msg.sender, block.timestamp);\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n        emit withdrawLog(msg.sender, block.timestamp);\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(address fundingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n    function getFunderCount() public view returns (uint256) {\\n    return s_funders.length;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xe57b0fdf190e3155e3978980edfc440847d4a56bbad4b76f4774f6ca21f0fd1b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620013c6380380620013c683398181016040528101906200003791906200011d565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b60805161123f620001876000396000818161030201528181610495015281816105890152818161076f0152610965015261123f6000f3fe6080604052600436106100915760003560e01c80639e87a5cd116100595780639e87a5cd1461016b5780639ed8cdf014610196578063b60d4288146101c1578063be2693f0146101cb578063d7b4750c146101e257610091565b80630343fb25146100965780630d8e6e2c146100d35780633ccfd60b146100fe5780636b69a59214610115578063893d20e814610140575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610c67565b61021f565b6040516100ca9190610cad565b60405180910390f35b3480156100df57600080fd5b506100e8610268565b6040516100f59190610cad565b60405180910390f35b34801561010a57600080fd5b50610113610300565b005b34801561012157600080fd5b5061012a610578565b6040516101379190610cad565b60405180910390f35b34801561014c57600080fd5b50610155610585565b6040516101629190610cd7565b60405180910390f35b34801561017757600080fd5b506101806105ad565b60405161018d9190610d51565b60405180910390f35b3480156101a257600080fd5b506101ab6105d7565b6040516101b89190610cad565b60405180910390f35b6101c96105e3565b005b3480156101d757600080fd5b506101e061076d565b005b3480156101ee57600080fd5b5061020960048036038101906102049190610d98565b610a49565b6040516102169190610cd7565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fb9190610dda565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610385576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104305760008082815481106103aa576103a9610e07565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061042890610e65565b915050610388565b50600067ffffffffffffffff81111561044c5761044b610ead565b5b60405190808252806020026020018201604052801561047a5781602001602082028036833780820191505090505b5060009080519060200190610490929190610b5d565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104d790610f0d565b60006040518083038185875af1925050503d8060008114610514576040519150601f19603f3d011682016040523d82523d6000602084013e610519565b606091505b505090508061052757600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167ff74fad994845ef73476114306db4fb3ddeafc0141ecbc906ba670c6d1f037dc64260405161056d9190610cad565b60405180910390a250565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008080549050905090565b6802b5e3af16b1880000610622600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610a9090919063ffffffff16565b1015610663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065a90610f7f565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106b29190610f9f565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167e70cd81276c355f748296dd0c89eac73e3e7a10c8c7997771e56e8e6cafceed4234604051610763929190610fd3565b60405180910390a2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107f2576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561087557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161082b575b5050505050905060005b815181101561090057600082828151811061089d5761089c610e07565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806108f890610e65565b91505061087f565b50600067ffffffffffffffff81111561091c5761091b610ead565b5b60405190808252806020026020018201604052801561094a5781602001602082028036833780820191505090505b5060009080519060200190610960929190610b5d565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516109a790610f0d565b60006040518083038185875af1925050503d80600081146109e4576040519150601f19603f3d011682016040523d82523d6000602084013e6109e9565b606091505b50509050806109f757600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167ff74fad994845ef73476114306db4fb3ddeafc0141ecbc906ba670c6d1f037dc642604051610a3d9190610cad565b60405180910390a25050565b6000808281548110610a5e57610a5d610e07565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610a9c83610acc565b90506000670de0b6b3a76400008583610ab59190610ffc565b610abf919061106d565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3e9190611116565b5050509150506402540be40081610b559190611191565b915050919050565b828054828255906000526020600020908101928215610bd6579160200282015b82811115610bd55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b7d565b5b509050610be39190610be7565b5090565b5b80821115610c00576000816000905550600101610be8565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c3482610c09565b9050919050565b610c4481610c29565b8114610c4f57600080fd5b50565b600081359050610c6181610c3b565b92915050565b600060208284031215610c7d57610c7c610c04565b5b6000610c8b84828501610c52565b91505092915050565b6000819050919050565b610ca781610c94565b82525050565b6000602082019050610cc26000830184610c9e565b92915050565b610cd181610c29565b82525050565b6000602082019050610cec6000830184610cc8565b92915050565b6000819050919050565b6000610d17610d12610d0d84610c09565b610cf2565b610c09565b9050919050565b6000610d2982610cfc565b9050919050565b6000610d3b82610d1e565b9050919050565b610d4b81610d30565b82525050565b6000602082019050610d666000830184610d42565b92915050565b610d7581610c94565b8114610d8057600080fd5b50565b600081359050610d9281610d6c565b92915050565b600060208284031215610dae57610dad610c04565b5b6000610dbc84828501610d83565b91505092915050565b600081519050610dd481610d6c565b92915050565b600060208284031215610df057610def610c04565b5b6000610dfe84828501610dc5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e7082610c94565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ea257610ea1610e36565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ef7600083610edc565b9150610f0282610ee7565b600082019050919050565b6000610f1882610eea565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610f69601b83610f22565b9150610f7482610f33565b602082019050919050565b60006020820190508181036000830152610f9881610f5c565b9050919050565b6000610faa82610c94565b9150610fb583610c94565b9250828201905080821115610fcd57610fcc610e36565b5b92915050565b6000604082019050610fe86000830185610c9e565b610ff56020830184610c9e565b9392505050565b600061100782610c94565b915061101283610c94565b925082820261102081610c94565b9150828204841483151761103757611036610e36565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061107882610c94565b915061108383610c94565b9250826110935761109261103e565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6110bd8161109e565b81146110c857600080fd5b50565b6000815190506110da816110b4565b92915050565b6000819050919050565b6110f3816110e0565b81146110fe57600080fd5b50565b600081519050611110816110ea565b92915050565b600080600080600060a0868803121561113257611131610c04565b5b6000611140888289016110cb565b955050602061115188828901611101565b945050604061116288828901610dc5565b935050606061117388828901610dc5565b9250506080611184888289016110cb565b9150509295509295909350565b600061119c826110e0565b91506111a7836110e0565b92508282026111b5816110e0565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156111ed576111ec610e36565b5b828205841483151761120257611201610e36565b5b509291505056fea264697066735822122094e0ba0009a23a0638a6be89c45ac70d05c51fd3f99c66e712c74bcc0089c07c64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c80639e87a5cd116100595780639e87a5cd1461016b5780639ed8cdf014610196578063b60d4288146101c1578063be2693f0146101cb578063d7b4750c146101e257610091565b80630343fb25146100965780630d8e6e2c146100d35780633ccfd60b146100fe5780636b69a59214610115578063893d20e814610140575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610c67565b61021f565b6040516100ca9190610cad565b60405180910390f35b3480156100df57600080fd5b506100e8610268565b6040516100f59190610cad565b60405180910390f35b34801561010a57600080fd5b50610113610300565b005b34801561012157600080fd5b5061012a610578565b6040516101379190610cad565b60405180910390f35b34801561014c57600080fd5b50610155610585565b6040516101629190610cd7565b60405180910390f35b34801561017757600080fd5b506101806105ad565b60405161018d9190610d51565b60405180910390f35b3480156101a257600080fd5b506101ab6105d7565b6040516101b89190610cad565b60405180910390f35b6101c96105e3565b005b3480156101d757600080fd5b506101e061076d565b005b3480156101ee57600080fd5b5061020960048036038101906102049190610d98565b610a49565b6040516102169190610cd7565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fb9190610dda565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610385576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104305760008082815481106103aa576103a9610e07565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061042890610e65565b915050610388565b50600067ffffffffffffffff81111561044c5761044b610ead565b5b60405190808252806020026020018201604052801561047a5781602001602082028036833780820191505090505b5060009080519060200190610490929190610b5d565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104d790610f0d565b60006040518083038185875af1925050503d8060008114610514576040519150601f19603f3d011682016040523d82523d6000602084013e610519565b606091505b505090508061052757600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167ff74fad994845ef73476114306db4fb3ddeafc0141ecbc906ba670c6d1f037dc64260405161056d9190610cad565b60405180910390a250565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008080549050905090565b6802b5e3af16b1880000610622600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610a9090919063ffffffff16565b1015610663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065a90610f7f565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106b29190610f9f565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167e70cd81276c355f748296dd0c89eac73e3e7a10c8c7997771e56e8e6cafceed4234604051610763929190610fd3565b60405180910390a2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107f2576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561087557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161082b575b5050505050905060005b815181101561090057600082828151811061089d5761089c610e07565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806108f890610e65565b91505061087f565b50600067ffffffffffffffff81111561091c5761091b610ead565b5b60405190808252806020026020018201604052801561094a5781602001602082028036833780820191505090505b5060009080519060200190610960929190610b5d565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516109a790610f0d565b60006040518083038185875af1925050503d80600081146109e4576040519150601f19603f3d011682016040523d82523d6000602084013e6109e9565b606091505b50509050806109f757600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167ff74fad994845ef73476114306db4fb3ddeafc0141ecbc906ba670c6d1f037dc642604051610a3d9190610cad565b60405180910390a25050565b6000808281548110610a5e57610a5d610e07565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610a9c83610acc565b90506000670de0b6b3a76400008583610ab59190610ffc565b610abf919061106d565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3e9190611116565b5050509150506402540be40081610b559190611191565b915050919050565b828054828255906000526020600020908101928215610bd6579160200282015b82811115610bd55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b7d565b5b509050610be39190610be7565b5090565b5b80821115610c00576000816000905550600101610be8565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c3482610c09565b9050919050565b610c4481610c29565b8114610c4f57600080fd5b50565b600081359050610c6181610c3b565b92915050565b600060208284031215610c7d57610c7c610c04565b5b6000610c8b84828501610c52565b91505092915050565b6000819050919050565b610ca781610c94565b82525050565b6000602082019050610cc26000830184610c9e565b92915050565b610cd181610c29565b82525050565b6000602082019050610cec6000830184610cc8565b92915050565b6000819050919050565b6000610d17610d12610d0d84610c09565b610cf2565b610c09565b9050919050565b6000610d2982610cfc565b9050919050565b6000610d3b82610d1e565b9050919050565b610d4b81610d30565b82525050565b6000602082019050610d666000830184610d42565b92915050565b610d7581610c94565b8114610d8057600080fd5b50565b600081359050610d9281610d6c565b92915050565b600060208284031215610dae57610dad610c04565b5b6000610dbc84828501610d83565b91505092915050565b600081519050610dd481610d6c565b92915050565b600060208284031215610df057610def610c04565b5b6000610dfe84828501610dc5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e7082610c94565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ea257610ea1610e36565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ef7600083610edc565b9150610f0282610ee7565b600082019050919050565b6000610f1882610eea565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610f69601b83610f22565b9150610f7482610f33565b602082019050919050565b60006020820190508181036000830152610f9881610f5c565b9050919050565b6000610faa82610c94565b9150610fb583610c94565b9250828201905080821115610fcd57610fcc610e36565b5b92915050565b6000604082019050610fe86000830185610c9e565b610ff56020830184610c9e565b9392505050565b600061100782610c94565b915061101283610c94565b925082820261102081610c94565b9150828204841483151761103757611036610e36565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061107882610c94565b915061108383610c94565b9250826110935761109261103e565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6110bd8161109e565b81146110c857600080fd5b50565b6000815190506110da816110b4565b92915050565b6000819050919050565b6110f3816110e0565b81146110fe57600080fd5b50565b600081519050611110816110ea565b92915050565b600080600080600060a0868803121561113257611131610c04565b5b6000611140888289016110cb565b955050602061115188828901611101565b945050604061116288828901610dc5565b935050606061117388828901610dc5565b9250506080611184888289016110cb565b9150509295509295909350565b600061119c826110e0565b91506111a7836110e0565b92508282026111b5816110e0565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156111ed576111ec610e36565b5b828205841483151761120257611201610e36565b5b509291505056fea264697066735822122094e0ba0009a23a0638a6be89c45ac70d05c51fd3f99c66e712c74bcc0089c07c64736f6c63430008130033",
  "devdoc": {
    "author": "Patrick Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 121,
        "contract": "contracts/fundMe.sol:fundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 125,
        "contract": "contracts/fundMe.sol:fundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 128,
        "contract": "contracts/fundMe.sol:fundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}